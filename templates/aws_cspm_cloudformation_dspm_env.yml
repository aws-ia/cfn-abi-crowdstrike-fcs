AWSTemplateFormatVersion: "2010-09-09"
Description: Create environment for CrowdStrike Data Analysis
Mappings:
  TagMap:
    CrowdStrikeTag:
      Name: ProvisionedBy
      Value: CrowdStrike
    LogicalTag:
      Name: CrowdStrikeLogicalId
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment Configuration
        Parameters:
          - CreateVPC
          - CreateNatGateway
      - Label:
          default: VPC Configuration (relevant only if using an existing VPC)
        Parameters:
          - VPC
          - DBSubnetA
          - DBSubnetB
      - Label:
          default: Role Names
        Parameters:
          - CrowdStrikeIntegrationRoleName
          - CrowdStrikeScannerRoleName
    ParameterLabels:
      CreateVPC:
        default: Create a new VPC for CrowdStrike environment
      CreateNatGateway:
        default: Create nat gateway (relevant only if creating a new VPC)
      VPC:
        default: The VPC ID to use
      DBSubnetA:
        default: The first subnet id to use (must be in the chosen VPC)
      DBSubnetB:
        default: The second subnet id to use (must be in the chosen VPC)
      CrowdStrikeIntegrationRoleName:
        default: CrowdStrike integration role name
      CrowdStrikeScannerRoleName:
        default: CrowdStrike scanner role name
Parameters:
  CreateNatGateway:
    Type: String
    Description: Create nat gateway
    Default: "yes"
    AllowedValues: [ "yes", "no" ]
  CreateVPC:
    Type: String
    Default: "yes"
    AllowedValues: [ "yes", "no" ]
  VPC:
    Type: String
    Default: ""
  DBSubnetA:
    Type: String
    Default: ""
  DBSubnetB:
    Type: String
    Default: ""
  CrowdStrikeIntegrationRoleName:
    Type: String
    Description: The ARN of the role name you gave in the original deployment
    Default: CrowdStrikeDSPMRole
  CrowdStrikeScannerRoleName:
    Type: String
    Description: The ARN of the scanner role name you gave in the original deployment
    Default: CrowdStrikeDSPMScannerRole
Conditions:
  CreateNatGateway:
    !Equals [!Ref CreateNatGateway, "yes"]
  NotCreateNatGateway:
    !Equals [ !Ref CreateNatGateway, "no" ]
  CreateVPC:
    !Equals ["yes", !Ref CreateVPC]
  # NotCreateVPC:
  #   !Equals ["no", !Ref CreateVPC]
  CreateVPCAndCreateNatGateway:
    !And [!Condition CreateVPC, !Condition CreateNatGateway]
  CreateVPCAndNotCreateNatGateway:
    !And [!Condition CreateVPC, !Condition NotCreateNatGateway]

Resources:
  CreatedVPC:
    Type: AWS::EC2::VPC
    Condition: CreateVPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ !Ref "AWS::StackName", "-VPC" ] ]
        - Key: !FindInMap [TagMap, CrowdStrikeTag, Name]
          Value: !FindInMap [TagMap, CrowdStrikeTag, Value]
  CreatedInternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVPC
    DependsOn: CreatedVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateVPC
    Properties:
      VpcId: !Ref CreatedVPC
      InternetGatewayId: !Ref CreatedInternetGateway
  CreatedDBSubnetA:
    Type: AWS::EC2::Subnet
    Condition: CreateVPC
    Properties:
      VpcId: !Ref CreatedVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DB-A
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
  CreatedDBSubnetB:
    Type: AWS::EC2::Subnet
    Condition: CreateVPC
    Properties:
      VpcId: !Ref CreatedVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DB-B
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${AWS::StackName}-DBSubnetGroup
      DBSubnetGroupDescription: "CrowdStrike DB subnet group"
      SubnetIds:
        - !If [ CreateVPC, !Ref CreatedDBSubnetA, !Ref DBSubnetA ]
        - !If [ CreateVPC, !Ref CreatedDBSubnetB, !Ref DBSubnetB ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnetGroup
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
        - Key: !FindInMap [ TagMap, LogicalTag, Name ]
          Value: DBSubnetGroup
  RedshiftSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: "CrowdStrike Redshift subnet group"
      SubnetIds:
        - !If [ CreateVPC, !Ref CreatedDBSubnetA, !Ref DBSubnetA ]
        - !If [ CreateVPC, !Ref CreatedDBSubnetB, !Ref DBSubnetB ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RedshiftSubnetGroup
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
        - Key: !FindInMap [ TagMap, LogicalTag, Name ]
          Value: RedshiftSubnetGroup
  PublicSubnet:
    Condition: CreateVPCAndCreateNatGateway
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [ CreateVPC, !Ref CreatedVPC, !Ref VPC ]
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Condition: CreateVPC
    Properties:
      VpcId: !If [ CreateVPC, !Ref CreatedVPC, !Ref VPC ]
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
        - Key: !FindInMap [ TagMap, LogicalTag, Name ]
          Value: PrivateSubnet
  PublicRouteTable:
    Condition: CreateVPCAndCreateNatGateway
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !If [ CreateVPC, !Ref CreatedVPC, !Ref VPC]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
  PublicRoute1:
    Condition: CreateVPCAndCreateNatGateway
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CreatedInternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateVPC
    Properties:
      VpcId: !If [ CreateVPC, !Ref CreatedVPC, !Ref VPC]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
  PrivateRoute1:
    Condition: CreateVPCAndCreateNatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PrivateRoute2:
    Condition: CreateVPCAndNotCreateNatGateway
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref CreatedInternetGateway
  NATGateway:
    Condition: CreateVPCAndCreateNatGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub NAT-${AWS::StackName}
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
  ElasticIPAddress:
    Condition: CreateVPCAndCreateNatGateway
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub EIP-${AWS::StackName}
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
        - Key: !FindInMap [ TagMap, LogicalTag, Name ]
          Value: ElasticIP
  PublicSubnetRouteTableAssociation:
    Condition: CreateVPCAndCreateNatGateway
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVPC
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  DBSubnetARouteTableAssociation:
    Condition: CreateVPCAndNotCreateNatGateway
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CreatedDBSubnetA
      RouteTableId: !Ref PrivateRouteTable
  DBSubnetBRouteTableAssociation:
    Condition: CreateVPCAndNotCreateNatGateway
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CreatedDBSubnetB
      RouteTableId: !Ref PrivateRouteTable
  VPCPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !If [ CreateVPC, !Sub "RunDataScanner-${AWS::Region}-${CreatedVPC}", !Sub "RunDataScanner-${AWS::Region}-${VPC}"]
      Roles:
      - !Ref CrowdStrikeIntegrationRoleName
      PolicyDocument:
        Statement:
          # Limits permission to launch EC2 to CrowdStrike vpc's subnet
          # The condition key ec2:Vpc is applicable to below resources
          - Sid: AllowRunInstances
            Action:
              - ec2:RunInstances
            Effect: Allow
            Resource:
              - !Sub "arn:aws:ec2:*:${AWS::AccountId}:security-group/*"
              - !Sub "arn:aws:ec2:*:${AWS::AccountId}:subnet/*"
            Condition:
              StringEquals:
                "ec2:Vpc": !If [ CreateVPC, !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${CreatedVPC}", !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VPC}" ]

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub EC2SecurityGroup-${AWS::StackName}
      GroupDescription: CrowdStrike
      VpcId: !If [ CreateVPC, !Ref CreatedVPC, !Ref VPC ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
        - Key: !FindInMap [ TagMap, LogicalTag, Name ]
          Value: EC2SecurityGroup
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub DBSecurityGroup-${AWS::StackName}
      GroupDescription: Security group attached to RDS instance to allow EC2 instances with specific security groups attached to connect to the database
      VpcId: !If [ CreateVPC, !Ref CreatedVPC, !Ref VPC ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DB
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
        - Key: !FindInMap [ TagMap, LogicalTag, Name ]
          Value: DBSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '1521'
          ToPort: '1523'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '27017'
          ToPort: '27017'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '9042'
          ToPort: '9042'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '9200'
          ToPort: '9200'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
        - IpProtocol: tcp
          FromPort: '5439'
          ToPort: '5439'
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: 'DB Security Group Ingress'
  CrowdStrikeKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: CrowdStrike DSPM KMS Key
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: 2012-10-17
        Id: CrowdStrike-key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":root" ] ]
            Action:
              - kms:*
            Resource: "*"
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":role/", !Ref CrowdStrikeIntegrationRoleName ] ]
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !Join [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":role/", !Ref CrowdStrikeIntegrationRoleName ] ]
                - !Join [ "", [ "arn:aws:iam::", !Ref "AWS::AccountId", ":role/", !Ref CrowdStrikeScannerRoleName ] ]
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: "*"
      Tags:
        - Key: !FindInMap [ TagMap, CrowdStrikeTag, Name ]
          Value: !FindInMap [ TagMap, CrowdStrikeTag, Value ]
        - Key: !FindInMap [ TagMap, LogicalTag, Name ]
          Value: KMSKey
  CrowdStrikeKeyAlias:
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: alias/CrowdStrikeDSPMKey
      TargetKeyId: !Ref CrowdStrikeKMSKey

Outputs:
  CrowdStrikeKMSKey:
    Description: The arn of the KMS key that CrowdStrike will use
    Value: !GetAtt CrowdStrikeKMSKey.Arn